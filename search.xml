<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[数组相关操作笔记]]></title>
      <url>%2F2016%2F11%2F25%2F%E6%95%B0%E7%BB%84%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C%E6%80%BB%E7%BB%93%2F</url>
      <content type="text"><![CDATA[最近在FFC上做题，做到了算法中的数组相关操作，所以也简单做下笔记，以备不时之需~ 创建数组1.使用关键词new来创建数组对象1var arr=new Array('a','b','c'); 2.直接创建（简单粗暴）1var arr=['a','b','c']; 数组的相关操作方法1.map方法可以方便的迭代数组map方法会迭代数组中的每一个元素，并根据回调函数来处理每一个元素，最后返回一个新数组。注意，这个方法不会改变原始数组。123var timesFour = arr.map(function(val)&#123; return val * 4;&#125;); 在我们的例子中，回调函数只有一个参数，即数组中元素的值 (val 参数)但其实，你的回调函数也可以支持多个参数，譬如：元素的索引index、原始数组arr。 2.reduce用来迭代一个数组，并且把它累积到一个值中使用 reduce 方法时，你要传入一个回调函数，这个回调函数的参数是一个累加器（比如例子中的 previousVal)和当前值 (currentVal）。reduce 方法有一个可选的第二参数，它可以被用来设置累加器的初始值。如果没有在这定义初始值，那么初始值将变成数组中的第一项，而 currentVal 将从数组的第二项开始。 下面的例子使用了 reduce 来让数组中的所有值相减：123var singleVal = array.reduce(function(previousVal, currentVal) &#123; return previousVal - currentVal;&#125;, 0); 3.filter方法用来迭代一个数组，并且按给出的条件过滤出符合的元素filter 方法传入一个回调函数，这个回调函数会携带一个参数，参数为当前迭代的项（我们叫它 val ）。回调函数返回 true 的项会保留在数组中，返回 false 的项会被过滤出数组。 下面的代码示例展示了使用 filter 来移除数组中值等于5的项：(注意： 我们忽略了第二参数和第三参数，因为例子中我们只需要第一参数就够了。)123array = array.filter(function(val) &#123; return val !== 5;&#125;); 4.使用sort方法，你可以很容易的按字母顺序或数字顺序对数组中的元素进行排序与我们之前用的数组方法仅仅返回一个新数组不同， sort 方法将改变原数组，返回被排序后的数组。sort 可以把比较函数作为参数传入。比较函数有返回值，当 a 小于 b，返回一个负数；当 a 大于 b ，返回一个正数；相等时返回0。如果没有传入比较函数，它将把值全部转成字符串，并按照字母顺序进行排序。 下面的例子将展示 sort 的使用，传入的比较函数把元素按照从小到大的顺序进行排列：1234var array = [1, 12, 21, 2];array.sort(function(a, b) &#123; return a - b;&#125;); 5.使用 reverse 方法来翻转数组(也就是倒序)12var myArray = [1, 2, 3];myArray.reverse(); //myArray = [3, 2, 1]; 6.concat方法可以把两个数组的内容合并到一个数组中concat 方法的参数应该是一个数组。参数中的数组会拼接在原数组的后面，并作为一个新数组返回。 下面是一个拼接数组的例子，用concat 把 otherArray 拼接在 oldArray 的后面：1newArray = oldArray.concat(otherArray); 7.split方法按指定分隔符将字符串分割为数组(可以用于将字符串转为数组)你要给 split 方法传递一个参数，这个参数将会作为一个分隔符。 下面的例子展示了 split 方法的使用，按照 s 字母进行分割：1var array = string.split('s'); 8.用join方法来把数组转换成字符串下面展示了使用 join 来将数组中的每一项放入字符串，并用 and 进行连接：123var veggies = ["Celery", "Radish", "Carrot", "Potato"];var salad = veggies.join(" and ");console.log(salad); // "Celery and Radish 9.slice返回数组的一部分（提取字符串的一部分）123var arr=['a','b','c','d'];arr.slice(1,2) //['b','c']接收一或两个参数，分别为要截取的新数组的开始位置和结束位置,（新数组不包含结束位置项）arr.slice(2); //['c','d']如果只有一个参数，则表示从截取该位置的项到末尾的项 10.splice在数组中插入或删除一些元素，返回一个包含被删除项目的数组1234var arr=['a','b','c','d'];arr.splice(1,2); //会返回删除的项组成的数组，原数组变成['a','d'],如果是两个参数，则分别表示要删除的第一项的位置和要删除的项数。这是一个很强大的方法，一般用于在中部插入项，也可以用于删除和替换。arr.splice(2,0,'e','f'); //原数组变成["a","b","e","f,"c","d"]，如果提供3个以上的参数，则第一个表示插入的起始位置，第二个表示要删除的项，第三个以后表示要插入的项arr.splice(1,1,'e','f'); //替换用法，原数组变成["a","e","f","c","d"] 11.indexOf返回参数出现的第一处索引值123var arr=['a','b','c','d'];arr.indexOf('b'); //1(从零开始)arr.lastindexOf('c'); //2,最后出现的位置 如果找不到则会返回-1;可以接受第二个参数，表示从第几个位置开始查找 12.every对数组中的每一项运行传入的函数，如果每一项都返回true，则返回true1234567var a=[1,2,3,4,3,2,1];a.every(function(item,index,arr)&#123;return (item&gt;2)&#125;); //false 13.some对数组中的每一项运行传入的函数，如果该函数对某一项返回true，则返回true1234567var a=[1,2,3,4,3,2,1];a.some(function(item,index,arr)&#123;return (item&gt;2)&#125;); //true 参考文章：JavaScript Array（数组）对象Array对象的方法大全，看看你知道多少.]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[css清除浮动方法]]></title>
      <url>%2F2016%2F11%2F17%2Fcss%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E6%96%B9%E6%B3%95%2F</url>
      <content type="text"><![CDATA[什么是css清除浮动？在非IE浏览器下，当容器的高度为auto，且容器的内容中有浮动的元素，在这种情况下，容器的高度不能包裹住容器的内容时，使得内容溢出到容器外面现象。（因此我在在没有充分了解浮动之前，能不用浮动就尽量少用了，具体方法就是使用绝对定位。但是浮动总是不可逃避的…）为了防止这个现象的出现而进行的CSS处理，就叫CSS清除浮动。 例子说明如下代码所示,会出现div包不住img和p元素的情况（此处盗用w3c的例子）1234567891011121314151617.news &#123; background-color: gray; border: solid 1px black; &#125;.news img &#123; float: left; &#125;.news p &#123; float: right; &#125;&lt;div class="news"&gt;&lt;img src="news-pic.jpg" /&gt;&lt;p&gt;some text&lt;/p&gt;&lt;/div&gt; 清除浮动的方法方法一：添加一个空的div进行清理，(添加无意义的div简直不能忍啊，有木有啊？)12345678910111213141516171819202122.news &#123; background-color: gray; border: solid 1px black; &#125;.news img &#123; float: left; &#125;.news p &#123; float: right; &#125;.clear &#123; clear: both; &#125;&lt;div class="news"&gt;&lt;img src="news-pic.jpg" /&gt;&lt;p&gt;some text&lt;/p&gt;&lt;div class="clear"&gt;&lt;/div&gt;&lt;/div&gt; 方法二：对容器div进行浮动(这个好像有点猛，不太好控制吧..)123456789101112131415161718.news &#123; background-color: gray; border: solid 1px black; float: left; &#125;.news img &#123; float: left; &#125;.news p &#123; float: right; &#125;&lt;div class="news"&gt;&lt;img src="news-pic.jpg" /&gt;&lt;p&gt;some text&lt;/p&gt;&lt;/div&gt; 方法三：使用overflow属性12345678910111213141516171819.news &#123; background-color: gray; border: solid 1px black; overflow:hidden; *zoom:1; &#125;.news img &#123; float: left; &#125;.news p &#123; float: right; &#125;&lt;div class="news"&gt;&lt;img src="news-pic.jpg" /&gt;&lt;p&gt;some text&lt;/p&gt;&lt;/div&gt; 方法四：给浮动元素后面的元素添加clear属性12345678910111213141516171819202122.news &#123; background-color: gray; border: solid 1px black; &#125;.news img &#123; float: left; &#125;.news p &#123; float: right; &#125;.xxx&#123; clear:both; &#125;&lt;div class="news"&gt;&lt;img src="news-pic.jpg" /&gt;&lt;p&gt;some text&lt;/p&gt;&lt;div class="xxx"&gt;此处省略一万字&lt;/div&gt;&lt;/div&gt; 方法五：使用:after伪元素（亲测好用）after伪元素（代表一个元素之后最近的元素）123456789101112131415161718192021222324252627.news &#123; background-color: gray; border: solid 1px black; &#125;.news img &#123; float: left; &#125;.news p &#123; float: right; &#125;.clearfix&#123; *zoom:1; &#125;.clearfix:after&#123; content:''; display:block; clear:both; &#125;&lt;div class="news clearfix"&gt;&lt;img src="news-pic.jpg" /&gt;&lt;p&gt;some text&lt;/p&gt;&lt;/div&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[如何用hexo+Github pages搭建博客]]></title>
      <url>%2F2016%2F11%2F03%2F%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B%E5%8D%9A%E5%AE%A2%2F</url>
      <content type="text"><![CDATA[说起搭建博客这个事啊~其实走的弯路还真不少…(为了有个像样的博客也是拼了…)之前因为身边没有同学自己搭建博客，他们对于搭建博客也是没有什么兴趣，所以只能在网上扒扒教程了 T.T 最开始的时候呢看了看基本上都是选择Jekyll+Github Pages来搭建的，所以我也选择了Jekyll入坑ing..)因为Jekyll是基于Ruby语言(之前没有接触过Ruby,表示一脸懵逼)写的，所以开始搭建Ruby环境什么的，然后继续下去，到了最后搭建好了发现主题好难看(完美主义者表示受不了)然后想改改主题，又是一通折腾…总之别再跟我提这破玩意了！赶紧go die 吧！继续创作的心情都没有了，还好在论坛上有人给了我个建议用hexo多好，又是基于node.js的，简直贴地气啊，一个命令就能更新到Github仓库很方便有木有. 一不小心又扯多了…言归正传吧，下面就说说如何用hexo+Github pages轻松建立博客，避免走弯路 为什么要建立博客为什么选择hexo和Github Pages 域名是github的二级域名，完全免费(高富帅请忽略) hexo可以一键上传，及时查看效果，方便快捷 再次吐槽下Jekyll.. 为什么要写博客 本人表达能力不佳，记忆力不好，写下来能让我印象更深刻，提高我的写作思维能力 避免捡了芝麻丢了西瓜的尴尬 与他人分享交流，互相学习 配置环境 注册Github 作用：是用来做博客的远程创库、域名、服务器之类的 安装git 作用：把本地的hexo内容提交到github上去 安装node.js 作用：用来生成静态页面的,一路安装即可。 在windows下配置SSH连接Github检查本机是否有ssh key设置右键打开 Git Bash here ,输入 $ cd ~/.ssh 或cd .ssh,如果之前没有用过git的话会提示：No such file or directory;如果有则进入~/.ssh路径下,输入$ ls查看当前路径文件1$ cd ~/.ssh 生成新的ssh1$ ssh-keygen -t rsa -C "xxxxxx@yy.com" #建议填写自己真实有效的邮箱地址 (可生成ssh key自定义名称的密钥，默认id_rsa。) 然后系统会要你输入密码。这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入。(我是懒得输密码的…)12Enter passphrase (empty for no passphrase):&lt;输入加密串&gt;Enter same passphrase again:&lt;再次输入加密串&gt; 然后看到2048然后一个挺可爱的图形就是成功了（偷懒一下，懒得弄图片了..） 将ssh key配置到github上 首先在C盘上找到id_rsa.pub文件并2复制里面的东西（不知道在哪里的可以直接搜索） 登陆github系统。点击右上角的图像—&gt;Settings —&gt; SSH and GPG keys。 点击New SSH key，把你刚刚复制的本地生成的密钥文件内容黏贴到里面（Key文本框中）,点击Add SSH key就ok了 测试是否OK输入1$ ssh -T git@github.com 看到1Hi spongeboblyl! You've successfully authenticated, but GitHub does not provide shell access. 就是成功了 设置用户信息现在你已经可以通过SSH链接到GitHub了，还有一些个人信息需要完善的。Git会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的。 12$ git config --global user.name "你的github用户名" //用户名$ git config --global user.email "你的邮箱" //填写自己的邮箱 完成以上步骤就可以连接你的github了 开始建立博客在github上建立仓库登录github,点击右上角的加号，然后点击New repository填写仓库名称（这个仓库只能是“username.github.io”这样的格式，username为你的账户的用户名）然后点击创建就可以了 安装Hexo打开git bash 输入1$ npm install -g hexo 然后随意在一个地方新建一个文件夹，名字随意（我的是hexo）,然后进入文件右键打开git bash,输入1$ hexo init Hexo随后会自动在目标文件夹建立网站所需要的所有文件。现在我们已经搭建起本地的hexo博客了。 输入下面的指令然后打开浏览器输入localhost:4000就能预览默认主题的博客了12$ hexo g$ hexo s 文件结构说明因为我看别人的时候不知道哪个文件是干嘛的，怎么来的，所以我觉得很有必要说明一下生成的文件大概是干嘛的。.deploy_git 这个文件夹是执行$ hexo d后部署到你的github仓库上的所有文件;public 这个是执行$ hexo g预览后生成的文件夹，和.deploy_git差不太多，只是没有提交到github仓库上；scaffolds 模版文件夹，当您新建文章时，Hexo 会根据 scaffold 来建立文件;source 资源文件夹是存放用户资源的地方。除posts文件夹之外，开头命名为(下划线)的文件/ 文件夹和隐藏的文件将会被忽略;themes 主题文件夹_config.yml 网站的 配置 信息，您可以在此配置大部分的参数。(还有一个常用的配置文件在themes&gt;你的主题&gt;_config.yml下，可以配置很多东西，至于怎么配置可以查看你的主题文档) 更换主题我想一般情况下大多数人都不会满足于默认的主题吧，那么接下来我们讲讲如何更换自己满意的主题。主题在hexo官网上就可以挑选 每次更换主题前清空一下database1$ hexo clean 通过git克隆主题（这里随便找了一个主题）1$ git clone https://github.com/wzpan/hexo-theme-freemind.git 启用主题1theme: hexo-theme-next 修改hexo根目录下的config.yml配置文件中的theme属性，将其设置为hexo-theme-freemind 更新主题12$ cd themes/hexo-theme-freemind$ git pull 这样主题就更新完成了，可以再输入12$ hexo g$ hexo s 打开浏览器看看效果 更新头像首先将你的头像放到source文件夹里面（其实放哪里都行了，只要路径设置对了就可以了），然后打开你的主题下的_config.yml修改avatar参数1avatar: xxx.jpg 上传到github仓库打开hexo目录下的_config.yml，改成下面的内容就行了123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repository: https://github.com/你的用户名/你的用户名.github.io.git branch: master 然后执行命令12$ hexo g$ hexo d 如果在执行 hexo deploy 后,出现 error deployer not found:github 则需要安装hexo-deployer-git 1$ npm install hexo-deployer-git --save 然后打开浏览器输入https://spongeboblyl.github.io就可以查看你的博客了^_^ 写文章建好博客后当然回事要写文章了，之前我建好的时候也不懂怎么写文章的…(真脸红)。执行1$ hexo new "文章名" 然后在文件夹里找到你新建的文章source &gt; _posts &gt; 你的文章.md,用编辑器（我喜欢用sublime text）打开它在里面写好了就可以了,写好了执行12$ hexo g$ hexo s 打开localhost:4000就能预览了 参考：http://www.jianshu.com/p/465830080ea9https://www.v2ex.com/t/175940https://seminelee.github.io/2016/07/24/set-up-a-blog/]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Markdown--基本介绍]]></title>
      <url>%2F2016%2F11%2F02%2FMarkdown%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
      <content type="text"><![CDATA[首先呢，在建立个人博客之前，我是没有使用过markdown的，也只是听说过他很简单,大概只有十个标记吧，现在呢写博客需要用它，所以我就边学边写一些关于markdown的笔记吧(当然这里只写一些常用的啦..够日常写文章就行了 T.T)，以免以后忘记又得去查文档（简直被我的机智给帅哭了 ^.^） markdown使用环境任意一款文本编辑器都可以写markdown，但有些专门为markdown设计的编辑器，拥有写作过程中所见即所得的功能(如图，左边是纯markdown写作，右边是它的呈现效果)，并且可以方便地将markdown转化为html。 Windows: MarkdownPad Linux: ReText Mac: Mou markdown基本语法标题标题是每篇文章都需要也是最常用的格式，在 Markdown 中，如果一段文字被定义为标题，只要在这段文字前加 # 号即可 (注意#号与标题之间的空格) 123# 一号标题## 二号标题### 三号标题 其效果图如下图所示: 图片与链接12![名称](图片地址) --引用图片[加链接的关键字](链接地址) --加链接 其效果图如下图所示: 粗体与斜体用两个号将文本包裹起来就是粗体文字了，用一个号包裹就是斜体文字 12**粗体***斜体* 效果展示：粗体斜体 列表(就是ul、li啦~)12-文本 --无序列表1.文本 --有序列表 效果图： 引用如果你需要引用一小段别处的句子，那么就要用引用的格式。只需要在文本前加入 &gt; 尖括号即可。 1&gt;文本 效果图： 代码框代码框效果就是图片中展示代码的黑框了…有几种写法：1.code是行内代码(inline code)的写法 2.块代码(block code)的写法：代码每一行的前面都加4个空格或一个tab 3.Fenced Code Block，写法是：第一行和最后一行都是3个 “ ` “，中间的行是代码 1`代码部分` 分割线分割线只需要用3个*号就行了。 表格表格貌似是最麻烦的了… 12345| Tables | Are | Cool || ------------- |:-------------:| -----:|| col 3 is | right-aligned | $1600 || col 2 is | centered | $12 || zebra stripes | are neat | $1 | 效果就是下面的表格了： Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 在此练习一个小时就能搞定了参考文章：Te_Lee]]></content>
    </entry>

    
  
  
</search>
